import { BrowserRouter as Router, Routes, Route, useParams } from "react-router-dom";
import * as React from 'react';
import Register from './components/Register';
import Login from './components/Login';
import Dashboard from './components/Dashboards/Dashboard';
import Chat from './components/Chat';
import useMediaQuery from '@mui/material/useMediaQuery';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { AuthProvider, AuthContext } from './context/auth';
import SupervisorDashboard from './components/Dashboards/SupervisorDashboard';
import UnauthorizedPage from './components/UnauthorizedPage';
import HeaderAndDrawer from './components/Commons/HeaderAndDrawer';
import ProtectedRoute from './ProtectedRoute'; 



function App() {
  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');

  const theme = React.useMemo(
    () =>
      createTheme({
        palette: {
          mode: prefersDarkMode ? 'dark' : 'light',
        },
      }),
    [prefersDarkMode],
  );


  

  return (
    
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <AuthProvider>
        <Router>
          <HeaderAndDrawer>
            <Routes>
              <Route path="/register" element={<Register />} />
              <Route path="/login" element={<Login />} />
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/chat/:conversationId" element={<ChatWrapper />} />
              <Route path="/chat/" element={<Chat />} />
            
              <Route
                path="/supervisor-dashboard"
                element={
                  <AuthContext.Consumer>
                    {(context) => <SupervisorDashboard user={context.user} />}
                  </AuthContext.Consumer>
                }
              />
              <Route path="/" element={<Login />} />
              <Route path="/unauthorized" element={<UnauthorizedPage />} />
            </Routes>
          </HeaderAndDrawer>
        </Router>
      </AuthProvider>
    </ThemeProvider>
  );
}



function ChatWrapper() {
  const { conversationId } = useParams(); // Access the conversationId from the path
  return (
    <AuthContext.Consumer>
      {(context) => <Chat conversationId={conversationId} />}
    </AuthContext.Consumer>
  );
}

export default App;